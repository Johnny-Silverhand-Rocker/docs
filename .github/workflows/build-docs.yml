name: Deploy Documentation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build metadata
        run: pip install -e .

      - name: Build MkDocs site
        run: mkdocs build

      - name: Version Management
        id: version
        run: |
          echo "All tags:"
          git tag -l
          git fetch --tags
          
          if [ ! -f VERSION ]; then
            echo "0.0.0" > VERSION
          fi
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version from file: $CURRENT_VERSION"
          
          git fetch --tags
          LATEST_TAG=$(git tag -l | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          LATEST_VERSION=${LATEST_TAG#v}
          echo "Latest version from tag: $LATEST_VERSION"
          
          version_gt() {
            test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
          }
          
          if version_gt "$CURRENT_VERSION" "$LATEST_VERSION"; then
            echo "Manual version update detected"
            NEW_VERSION=$CURRENT_VERSION
          else
            echo "Automatic patch increment"
            IFS='.' read -r major minor patch <<< "$LATEST_VERSION"
            patch=$((patch + 1))
            NEW_VERSION="$major.$minor.$patch"
          fi
          
          echo "New version will be: $NEW_VERSION"
          echo "$NEW_VERSION" > VERSION
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit VERSION to main
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          
          git checkout main
          git add VERSION
          if ! git diff --cached --quiet; then
            git commit -m "Update version to v$NEW_VERSION [skip ci]"
            git push origin main
          else
            echo "No changes to VERSION, skipping commit"
          fi

      - name: Create and push tag
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body: |
            - Update documentation to version v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          user_name: github-actions
          user_email: github-actions@users.noreply.github.com
